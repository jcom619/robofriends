{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","console","log","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","background","margin","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d67878c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\n  return (\n    <div className='bg-lightest-blue br3 pa3 ma2 dib f1 tc grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${ id }`} alt='HiMundo!'/>\n      <div>\n        <h2>{ name }</h2>\n        <p>{ email }</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div className='tc'>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card key={ i }\n                  id={ robots[i].id }\n                  name={ robots[i].name }\n                  username={ robots[i].username }\n                  email={ robots[i].email }\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className='tc'>\n      <input className='pa3 ma2 ba b--green bg-lightest-blue'\n             type='search'\n             placeholder='Search Robots'\n             onChange={ searchChange }\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ background: 'black',\n                  margin: '50px',\n                  overflowY: 'scroll',\n                  border: '1px solid black',\n                  height: '700px',\n    }}>\n      { props.children }\n    </div>\n  );\n}\nexport default Scroll;\n","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>No Bueno!!!</h1>\n    }\n    return this.props.children\n  }\n}\n\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    // return true\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1 }\n    })\n  }\n  render() {\n    console.log('CounterButton');\n    return (\n      <button color={ this.props.color } onClick={ this.updateCount }>\n      Count: { this.state.count }\n      </button>\n    )\n  }\n}\n\n\n\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\n\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    console.log('Header');\n    return (\n      <div>    \n        <h1 className=''>RoboFriends</h1>\n        <CounterButton color={ 'red' } />\n      </div>\n    );\n  }\n}\n\n\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport '../containers/index.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n\ncomponentDidMount() {\n  this.props.onRequestRobots();\n}\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return isPending ?\n     <h1 className='tc f1 ma5'>...Loading</h1>:\n    (\n        <div className='tc f1'>\n          <Header />\n          <SearchBox searchChange={ onSearchChange } />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={ filteredRobots } />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n  .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './containers/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store =\n  createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App/>\n  </Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}